#!/bin/python3

import configparser
from pathlib import Path
from datetime import datetime

import spotipy
from spotipy.oauth2 import SpotifyOAuth
from genius import Genius

cwd = str(Path(__file__).parent)
config = configparser.ConfigParser()
config.read(cwd + "/config.ini")

USER = config["spotify"]["user"]
CLIENT_ID = config["spotify"]["client_id"]
CLIENT_SECRET = config["spotify"]["client_secret"]
REDIRECT_URI = config["spotify"]["redirect_uri"]
SCOPE = config["spotify"]["scope"]
GENIUS_TOKEN = config["genius"]["token"]
CACHE_PATH = cwd + "/.cache"

album_cache = {}


def update_cache(song, release_date):
    album_name = "{} {}".format(song["album"], song["artist"])
    album_cache[album_name] = release_date


def get_song_release_date(genius_client, song):
        album_name = "{} {}".format(song["album"], song["artist"])
        if album_name in album_cache:
            return album_cache[album_name]

        elif len(song["release_date"].split("-")) == 3 and "-1-1" not in song["release_date"].split("-"):
            # Most of release date placeholder are year-only (e.g.: 1997) or 1 January (2004-1-1)
            year, month, day = song["release_date"].split("-")
            return datetime(int(year), int(month), int(day))

        match_list = list(genius_client.search(song["name"], page=1, per_page=5))
        for match in match_list:
            if match.album and match.album.name == song["album"]:
                return match.release_date

        print("<< Can't find an accurate release date on Spotify and Genius for >>")
        print("{} (setted automatically on {}-1-1)".format(song["name"], song["release_date"]))
        return datetime(int(song["release_date"]), 1, 1)


def get_song_new_position(song, songs, genius_client=None):
    song_release_date = get_song_release_date(genius_client, song)
    album_found = False
    for index in range(len(songs)):
        current_song = songs[index]
        if song["album"] == current_song["album"]:
            album_found = True
            if song["disc_number"] == current_song["disc_number"] and song["track_number"] > current_song["track_number"]:
                return index
        elif album_found:
            # Last song of an album added to the playlist
            return index
        else:
            current_song_release_date = get_song_release_date(genius_client, current_song)
            update_cache(current_song, current_song_release_date)
            if song_release_date >= current_song_release_date:
                return index
    return index


def sort_entire_playlist(spotify_client, playlist_id, songs):
    genius_client = Genius(GENIUS_TOKEN)
    song_release_dates = []
    for song in songs:
        release_date = get_song_release_date(genius_client, song)
        song_release_dates.append([song, release_date])
        update_cache(song, release_date)
    
    # FIX: album not in order
    song_release_dates = [song[0] for song in sorted(song_release_dates, key=lambda x: x[1], reverse=True)]

    for i in range(len(song_release_dates)):
        if song_release_dates[i]["id"] != songs[i]["id"]:
            spotify_client.playlist_reorder_items(
                playlist_id=playlist_id,
                range_start=songs.index(song_release_dates[i]),
                insert_before=i
            )
            songs.remove(song_release_dates[i])
            songs.insert(i, song_release_dates[i])


def choose_songs(songs):
    res = []
    # Latest 100 songs added to playlist as the first to be listed
    last_songs = songs[::-1][:20]
    print(f":: Last 100 songs of this playlist")
    # Reverse order for a better view
    for index, song in zip(range(len(last_songs), 0, -1), last_songs[::-1]):
        print(index, " ", song["artist"], "-", song["name"])
    print("==> Songs to sort (eg: \"1 2 3\", \"1-4\", or \"all\"):")
    ch = input("==> ")
    if ch == "all":
        return songs
    for group in ch.split(" "):
        if not group:
            continue
        start = int(group.split("-")[0])
        end = int(group.split("-")[-1]) + 1
        for i in range(start, end):
            res.append(last_songs[i - 1])
    return res


def get_playlist_songs(spotify_client, playlist):
    songs = []
    offset = 0
    while True:
        playlist_items = spotify_client.playlist_items(playlist["id"], limit=100, offset=offset)
        if not playlist_items["items"]:
            break
        for item in playlist_items["items"]:
            songs.append({
                "id": item["track"]["id"],
                "name": item["track"]["name"],
                "artist": item["track"]["artists"][0]["name"],
                "album": item["track"]["album"]["name"],
                "release_date": item["track"]["album"]["release_date"],
                "track_number": item["track"]["track_number"],
                "disc_number": item["track"]["disc_number"]
            })
        offset += 100
    return songs  


def choose_playlist(user_playlists):
    print(":: Your playlists")
    # Reverse order for a better view
    for index, playlist in zip(range(len(user_playlists), 0, -1), user_playlists[::-1]):
        print(index, " ", playlist["name"])
    print("==> Choose the playlist to sort (eg: \"1\" or \"2\"): ")
    playlist_index = int(input("==> "))
    return user_playlists[playlist_index - 1]


def get_spotify_client():
    return spotipy.Spotify(
        auth_manager=SpotifyOAuth(
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET,
            redirect_uri=REDIRECT_URI,
            scope=SCOPE,
            cache_path=CACHE_PATH
        )
    )


def main():
    spotify_client = get_spotify_client()
    genius_client = Genius(GENIUS_TOKEN)

    user_playlists = spotify_client.current_user_playlists()["items"]
    playlist = choose_playlist(user_playlists)
    playlist_songs = get_playlist_songs(spotify_client, playlist)
    songs_to_sort = choose_songs(playlist_songs)
    if len(songs_to_sort) == len(playlist_songs):
        print("<< This may take several seconds if the playlist is very large >>")
        sort_entire_playlist(spotify_client, playlist["id"], playlist_songs)
    else:
        # We assume that if the user doesn't want to sort the entire playlist
        # the playlist is already sorted (except for the tracks selected)
        # so we need two different functions
        for song in songs_to_sort:
            print(":: Sorting", song["name"], "by", song["artist"])
            song_new_position = get_song_new_position(song, playlist_songs, genius_client=genius_client)
            spotify_client.playlist_reorder_items(
                playlist_id=playlist["id"],
                range_start=playlist_songs.index(song),
                insert_before=song_new_position
            )
            playlist_songs.remove(song)
            playlist_songs.insert(song_new_position, song)
    print("Operation completed!")


if __name__ == "__main__":
    main()
